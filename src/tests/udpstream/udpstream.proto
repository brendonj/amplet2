/*import "common/servers.proto";*/

package amplet2.udpstream;

message Report {
	optional Header header = 1;
	repeated Item reports = 2;
}

message Header {
        optional bytes address = 1;
        optional int32 family = 2;
        optional string schedule = 3;
	optional uint32 packet_size = 4 [default = 100];
	optional uint32 packet_spacing = 5 [default = 1000];
	optional uint32 packet_count = 6 [default = 11];
        optional uint32 percentile_count = 7 [default = 10];
        optional string name = 8;
        /** Differentiated Services Code Point (DSCP) used */
        optional uint32 dscp = 9 [default = 0];
}

message Item {
        enum Direction {
            NULL = 0;
            SERVER_TO_CLIENT = 1;
            CLIENT_TO_SERVER = 2;
        }
        optional Direction direction = 1;
        optional SummaryStats rtt = 2;
        optional SummaryStats jitter = 3;
        repeated int32 percentiles = 4;
        optional uint32 packets_received = 5;
        repeated Period loss_periods = 6;
        optional float loss_percent = 7;
        optional Voip voip = 8;
}

message Period {
        enum Status {
            LOST = 0;
            RECEIVED = 1;
        }
        optional Status status = 1;
        optional int32 length = 2;
}

message SummaryStats {
    optional int32 maximum = 1;
    optional int32 minimum = 2;
    optional int32 mean = 3;
    optional uint32 samples = 4;
}

message Voip {
    optional int32 icpif = 1;
    optional float cisco_mos = 2;
    optional float itu_rating = 3;
    optional float itu_mos = 4;
}



/**
 * @exclude
 */
message Hello {
    /*
    extend amplet2.servers.Hello {
        optional Hello data = 109;
    }
    */

    optional uint32 test_port = 1;
    optional uint32 packet_size = 2 [default = 100];
    optional uint32 packet_spacing = 3 [default = 1000];
    optional uint32 packet_count = 4 [default = 11];
    optional uint32 percentile_count = 5 [default = 10];
    optional uint32 dscp = 6;
}


/**
 * @exclude
 */
message Send {
    /*
    extend amplet2.servers.Send {
        optional Send data = 109;
    }
    */

    optional uint32 test_port = 1;
}
