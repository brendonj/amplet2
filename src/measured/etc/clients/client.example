# amplet2-client default client configuration file
#
# You MUST configure collector:address to the server where you want to report,
# otherwise your data will not be reported.
#
# You SHOULD configure ampname to the name of this monitor so that it can be
# easily identified from other monitors reporting to the same collector.


# The ampname is reported as the source of the tests. It should generally be
# unique (unless you have a really good reason not to). If it is not set then
# it defaults to the hostname of the machine.
#ampname = unknown

# Log level to control the number of messages logged. The given level is the
# minimum severity required to generate a log message. The default value is
# info, possible values are:
#   debug, info, notice, warn, error, crit, alert, emerg
#loglevel = info

# Source interface that all tests should bind to when sending test data
#interface = eth0

# Source IPv4 address that all tests should bind to when sending test data
#ipv4 = 192.0.2.1

# Source IPv6 address that all tests should bind to when sending test data
#ipv6 = 2001:DB8::1

# Minimum gap (in microseconds) between sending probe packets for most tests.
# By default this is set to 100us which may be too short for some connections
# with slower upload speeds. We are currently using 1000us for ADSL.
#packetdelay = 100

# Override the default nameservers in /etc/resolv.conf and use these ones
# instead. If you specify more than 3, only the first 3 valid addresses
# will be used.
#nameservers = { 192.0.2.100, 192.0.2.101, 192.0.2.102 }

# Collecter to which data should be reported. If there is a rabbitmq broker
# running on the local machine then "vialocal" should be set to true and the
# broker should be configured appropriately (the amplet client will try to do
# this on startup). A diskless/lightweight client may want to forgoe some
# reliability and report directly to a remote collector.
collector {
    vialocal = true
    address = amp.example.com
    vhost = /
    exchange = amp_exchange
    routingkey = amp
    port = 5671
    ssl = true
#    cacert = /etc/amplet2/keys/cacert.pem
#    cert = /etc/amplet2/keys/cert.pem
#    key = /etc/amplet2/keys/key.pem
    waitforcert = true
}

# The control interface is used by other amplets to request test servers be
# started (i.e. throughput, udpstream), or to remotely run tests from a client.
# Anyone connecting to this port has to provide a valid SSL certificate and
# have an appropriate "allow" rule for the command they send. All rules default
# to deny all, with more specific rules overriding less specific rules.
control {
    enabled = true
#    ipv4 = 1.2.3.4
#    ipv6 = 2001:DB8::1
#    interface = eth0
#    port = 8869
    acl server {
        allow = all
        deny = {}
    }
#    acl test {
#        allow = { .amp.example.com }
#        deny = { foo.amp.example.com }
#    }
#    acl schedule {
#        allow = {}
#        deny = all
#    }
}

# Schedule fetching allows the schedule file to be kept up to date with a
# remote source, without the need to use systems like puppet etc. If you use
# https then the server will be verified (using the built in CA bundle, or
# the specified cacert). If you specify client certs then they will be sent to
# the server for possible verification too. Setting identify to true will
# append the ampname of this client to the URL.
remotesched {
    fetch = false
#    url = https://amp.example.com/schedule
#    identify = true
#    frequency = 3600
#    cacert = /etc/amplet2/keys/cacert.pem
#    cert = /etc/amplet2/keys/cert.pem
#    key = /etc/amplet2/keys/key.pem
}
