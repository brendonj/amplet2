# The ampname is reported as the source of the tests. It should generally be
# unique (unless you have a really good reason not to). If it is not set then
# it defaults to the hostname of the machine.
#ampname = unknown

# Log level to control the number of messages logged. The given level is the
# minimum severity required to generate a log message. The default value is
# info, possible values are:
#   debug, info, notice, warn, error, crit, alert, emerg
#loglevel = info

# Source interface that all tests should bind to when sending test data
#interface = eth0

# Source IPv4 address that all tests should bind to when sending test data
#ipv4 = 1.2.3.4

# Source IPv6 address that all tests should bind to when sending test data
#ipv6 = 2001:dead:beef::1

# Override the default nameservers in /etc/resolv.conf and use these ones
# instead. If you specify more than 3, only the first 3 valid addresses
# will be used.
#nameservers = { 1.2.3.4, 5.6.7.8, 9.10.11.12 }

# Collecter to which data should be reported. If there is a rabbitmq broker
# running on the local machine then "vialocal" should be set to true and the
# broker should be configured appropriately (running `amplet -f` should do
# this). A diskless/lightweight client may want to forgoe some reliability
# and report directly to a remote collector.
collector {
    vialocal = true
    address = prophet.cms.waikato.ac.nz
    vhost = /
    exchange = amp_exchange
    routingkey = test
    port = 5671
    ssl = true
    cacert = /etc/amplet2/keys/cacert.pem
    cert = /etc/amplet2/keys/cert.pem
    key = /etc/amplet2/keys/key.pem
    waitforcert = -1
}

# The control interface is used by other amplets to request test servers be
# started. This is only useful if you expect to be the target of tests such
# as throughput. Anyone connecting to this port has to provide a valid SSL
# certificate before a test server will be started.
control {
    enabled = true
#    ipv4 = 1.2.3.4
#    ipv6 = 2001:dead:beef::1
#    interface = eth0
#    port = 8869
}

# Schedule fetching allows the schedule file to be kept up to date with a
# remote source, without the need to use systems like puppet etc. If you use
# https then the server will be verified (using the built in CA bundle, or
# the specified cacert). If you specify client certs then they will be sent to
# the server for possible verification too. Setting identify to true will send
# the ampname of this client as a GET parameter.
remotesched {
    fetch = false
#    url = https://example.com/schedule
#    identify = true
#    frequency = 3600
#    cacert = /etc/amplet2/keys/cacert.pem
#    cert = /etc/amplet2/keys/cert.pem
#    key = /etc/amplet2/keys/key.pem
}
