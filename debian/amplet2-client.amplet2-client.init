#!/bin/sh
### BEGIN INIT INFO
# Provides:          amplet2
# Required-Start:    $remote_fs $network $local_fs
# Required-Stop:     $remote_fs $network $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: AMP measurement daemon
# Description:       AMP measurement daemon
### END INIT INFO

# Author: Brendon Jones <brendonj@waikato.ac.nz>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=amplet2                    # Introduce a short description here
PKG_NAME=amplet2-client
DAEMON_NAME=amplet2             # Introduce the short server's name here
DAEMON=/usr/sbin/$DAEMON_NAME   # Introduce the server's location here
#PIDFILE=/var/run/$NAME.pid      # TODO create a proper pidfile
SCRIPTNAME=/etc/init.d/$PKG_NAME
START_DAEMON=1
CONFDIR=/etc/amplet2/clients
PIDDIR=/var/run/amplet2

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$PKG_NAME ] && . /etc/default/$PKG_NAME

# Don't start the daemon unless it has been manually enabled in
# /etc/default/amplet2. There is too much configuration required
# to assume it can be started initially.
[ $START_DAEMON -gt 0 ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Simple function to check if an item is contained within a space seperated list
#
contains()
{
    for item in $1; do
        if [ $item = $2 ]; then
            return 0
        fi
    done
    return 1
}

#
# Function that starts the daemon/service
#
do_start()
{
    SUCCESS=0
    FAILED=0

    # Make sure that the pid dir exists
    if [ ! -d $PIDDIR ]; then
        mkdir -p $PIDDIR
        #chown
        #chgrp
    fi

    # For every config file, try to run an amplet client
    for client in ${CONFDIR}/*.conf; do
        NAME=${client#$CONFDIR/}
        NAME=${NAME%.conf}
        PIDFILE=${PIDDIR}/${NAME%.conf}.pid

        # Start the client if no client is specified, or if it matches
        if ([ $# -eq 0 ] || contains $@ $NAME); then
            # TODO return appropriate thing if already running
            # use start-stop-daemon --test?
            start-stop-daemon --start --quiet --exec $DAEMON \
                    --pidfile $PIDFILE -- $DAEMON_OPTS -c $client -p $PIDFILE

            case "$?" in
		0|1) SUCCESS=$((SUCCESS-1)); \
                        [ "$VERBOSE" != no ] && log_success_msg $NAME ;;
		2|3) FAILED=$((FAILED-1)); \
                        [ "$VERBOSE" != no ] && log_failure_msg $NAME ;;
	    esac
        fi
    done

    # No failures, return success
    if [ $FAILED -eq 0 ]; then
        return 0
    fi

    # Some failures and some successes, return warning
    if [ $FAILED -gt 0 && $SUCCESS -gt 0 ]; then
        return 1
    fi

    # No successes, return failed
    return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    SUCCESS=0
    FAILED=0

    for client in ${CONFDIR}/*.conf; do
        NAME=${client#$CONFDIR/}
        NAME=${NAME%.conf}
        PIDFILE=${PIDDIR}/${NAME%.conf}.pid

        # Stop the client if no client is specified, or if it matches
        if ([ $# -eq 0 ] || contains $@ $NAME); then
            start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
                    --name $DAEMON_NAME --pidfile $PIDFILE
	    start-stop-daemon --stop --quiet --oknodo  --retry=0/30/KILL/5 \
                    --exec $DAEMON --pidfile $PIDFILE

            case "$?" in
                0|1) SUCCESS=$((SUCCESS-1)); \
                    [ "$VERBOSE" != no ] && log_success_msg $NAME ;;
                2|3) FAILED=$((FAILED-1)); \
                    [ "$VERBOSE" != no ] && log_failure_msg $NAME ;;
            esac
        fi
    done

    # No failures, return success
    if [ $FAILED -eq 0 ]; then
        return 0
    fi

    # Some failures and some successes, return warning
    if [ $FAILED -gt 0 && $SUCCESS -gt 0 ]; then
        return 1
    fi

    # No successes, return failed
    return 2
}

#
#
#
do_status() {
    RETVAL=0
    for client in ${CONFDIR}/*.conf; do
        NAME=${client#$CONFDIR/}
        NAME=${NAME%.conf}
        PIDFILE=${PIDDIR}/${NAME%.conf}.pid

        # Query the client if no client is specified, or if it matches
        if ([ $# -eq 0 ] || contains $@ $NAME); then
            status_of_proc -p $PIDFILE "$DAEMON" "$NAME"
            if [ $? -gt 0 ]; then
                RETVAL=2
            fi
        fi
    done
    return $RETVAL
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    for client in ${CONFDIR}/*.conf; do
        NAME=${client#$CONFDIR/}
        NAME=${NAME%.conf}
        PIDFILE=${PIDDIR}/${NAME%.conf}.pid

        # Reload the client if no client is specified, or if it matches
        if ([ $# -eq 0 ] || contains $@ $NAME); then
            start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE \
                --name $DAEMON_NAME

            case "$?" in
                0|1) SUCCESS=$((SUCCESS-1)); \
                        [ "$VERBOSE" != no ] && log_success_msg $NAME ;;
                2) FAILED=$((FAILED-1)); \
                        [ "$VERBOSE" != no ] && log_failure_msg $NAME ;;
            esac
        fi
    done
    return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && echo "Starting amplet2 clients:"
    # anything on the command line after "start" is a client name
    shift
    do_start $@
    #case "$?" in
    #        0) [ "$VERBOSE" != no ] && \
    #            log_success_msg "All amplet2 clients started ok" ;;
    #        1) [ "$VERBOSE" != no ] && \
    #            log_warning_msg "Some amplet2 clients failed to start" ;;
    #        2) [ "$VERBOSE" != no ] && \
    #            log_failure_msg "All amplet2 clients failed to start" ;;
    #esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$DAEMON_NAME"
        # anything on the command line after "start" is a client name
        shift
	do_stop $@
	#case "$?" in
	#	0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	#	2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	#esac
	;;
  status)
        shift
        echo "Current status of amplet2 clients:"
        do_status $@ && exit 0 || exit $?
       ;;
  reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
        shift
        echo "Reloading amplet2 clients:"
        do_reload $@
	;;
  restart)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
        shift
	echo "Restarting amplet2 clients:"
	do_stop $@
	case "$?" in
	  0|1)
		do_start $@
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload} [client...]" >&2
	#echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
