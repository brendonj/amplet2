#!/bin/sh
### BEGIN INIT INFO
# Provides:          amplet2
# Required-Start:    $remote_fs $network $local_fs
# Required-Stop:     $remote_fs $network $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: AMP measurement daemon
# Description:       AMP measurement daemon
### END INIT INFO

# Author: Brendon Jones <brendonj@waikato.ac.nz>

# For return codes see:
# http://refspecs.linuxbase.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=amplet2                    # Introduce a short description here
PKG_NAME=amplet2-client
DAEMON_NAME=amplet2             # Introduce the short server's name here
DAEMON=/usr/sbin/$DAEMON_NAME   # Introduce the server's location here
DAEMON_OPTS="-d"
SCRIPTNAME=/etc/init.d/$PKG_NAME
CONFDIR=/etc/amplet2/clients
PIDDIR=/var/run/amplet2
LOGDIR=/var/log/amplet2

# Exit if the package is not installed
if [ ! -x $DAEMON ]; then
    echo "Cannot find $DAEMON, aborting"
    exit 5
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions


#
# Wait for the pidfile to be populated and to contain a running pid
#
do_wait()
{
    attempt=0
    while [ $attempt -lt 100 ]; do
        attempt=$((attempt+1))
        if [ -f $1 ]; then
            # check if valid, running pid
            ps -p `cat $1` > /dev/null
            if [ $? -eq 0 ]; then
                # return success, amplet2 client started ok
                return 0
            fi
        fi
        sleep 0.1
    done
    # return failure, for some reason it didn't start properly
    return 2
}


#
# Function that starts the daemon/service
#
do_start()
{
    SUCCESS=0
    FAILED=0

    # Make sure that the pid dir exists
    if [ ! -d $PIDDIR ]; then
        mkdir -p $PIDDIR
        #chown
        #chgrp
    fi

    # Make sure that the log dir exists
    if [ ! -d $LOGDIR ]; then
        mkdir -p $LOGDIR
    fi

    # For every config file, try to run an amplet client
    for client in ${CONFDIR}/*.conf; do
        NAME=${client#$CONFDIR/}
        NAME=${NAME%.conf}
        PIDFILE=${PIDDIR}/${NAME%.conf}.pid

        # TODO return appropriate thing if already running
        # use start-stop-daemon --test?
        start-stop-daemon --start --quiet --exec $DAEMON \
                --pidfile $PIDFILE -- $DAEMON_OPTS -c $client -p $PIDFILE

        # if the client was started right now then wait for the pidfile
        # to be correct before continuing (makes sure puppet doesn't try
        # to start extra copies thinking it isn't running ok).
        if [ $RESULT -eq 0 ]; then
            # this will update $? for the next check, which is fine
            do_wait $PIDFILE
        fi

        case "$?" in
            0|1) SUCCESS=$((SUCCESS+1)); \
                    [ "$VERBOSE" != no ] && log_success_msg $NAME ;;
            2|3) FAILED=$((FAILED+1)); \
                    [ "$VERBOSE" != no ] && log_failure_msg $NAME ;;
        esac
    done

    # No failures and at least one success, return success
    if ([ $FAILED -eq 0 ] && [ $SUCCESS -gt 0 ]); then
        return 0
    fi

    # Some failures and some successes, return warning
    if ([ $FAILED -gt 0 ] && [ $SUCCESS -gt 0 ]); then
        return 1
    fi

    # No successes, return failed
    return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    for pidfile in ${PIDDIR}/*.pid; do

        if [ ! -f $pidfile ]; then
            continue
        fi

        NAME=${pidfile#$PIDDIR/}
        NAME=${NAME%.pid}
        PID=`cat $pidfile`

        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
                --name $DAEMON_NAME --pidfile $pidfile
        start-stop-daemon --stop --quiet --oknodo  --retry=0/30/KILL/5 \
                --exec $DAEMON --pidfile $pidfile

        if [ -n "$PID" ]; then
            # if there are any children left, send them a SIGTERM
            /usr/bin/pgrep -s $PID > /dev/null
            if [ $? -eq 0 ]; then
                /bin/kill -s TERM -- -$PID
            fi

            # make sure they are stopped, otherwise send a SIGKILL
            /usr/bin/pgrep -s $PID > /dev/null
            if [ $? -eq 0 ]; then
                sleep 3
                /bin/kill -s KILL -- -$PID 2> /dev/null
            fi
        fi
    done

    # We'll assume nothing survived the purge
    return 0
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    for client in ${CONFDIR}/*.conf; do
        NAME=${client#$CONFDIR/}
        NAME=${NAME%.conf}
        PIDFILE=${PIDDIR}/${NAME%.conf}.pid

        start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE \
            --name $DAEMON_NAME
    done
    return 0
}

case "$1" in
    start)
        do_start
        ;;

    stop)
        do_stop
        ;;

    reload|force-reload)
        do_reload
        ;;

    restart)
        do_stop
        do_start
        ;;

    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload}" >&2
	exit 3
	;;
esac
