/**
 * Data reporting messages for the AMP TCP latency test.
 *
 * This test measures the latency taken between sending a TCP SYN to a given
 * list of targets and receiving a useful TCP response.
 *
 * Each message contains one Report.
 * Each Report contains one Header and one Item per result.
 * Each Item contains information on a test result, including one TcpFlags.
 */
package amplet2.tcpping;


/**
 * An instance of the test will generate one Report message.
 */
message Report {
    /** Describes the test settings used in this test instance */
    optional Header header = 1;
    /** Results for all test targets */
    repeated Item reports = 2;
}


/**
 * The test header describes all of the settings that the test was configured
 * to run with. These settings are the same for every result contained within
 * the Report message.
 */
message Header {
    /**
     * Size of the TCP SYN probe packets in bytes (including IP and TCP headers)
     */
    optional uint32 packet_size = 1 [default = 64];
    /** Was the packet size randomly selected? */
    optional bool random = 2 [default = false];
    /** The TCP port that the probe was directed at */
    optional uint32 port = 3 [default = 80];
}


/**
 * A report will be generated for each test target, describing the target
 * itself, what sort of response was received (including any ICMP errors),
 * and how long it took to receive the response. All fields are optional -
 * only those with useful and relevant data are included.
 */
message Item {
    /** The address that responded to the probe packet */
    optional bytes address = 1;
    /** The family the responding address belongs to (AF_INET/AF_INET6) */
    optional int32 family = 2;
    /** The round trip time to the target, measured in microseconds */
    optional uint32 rtt = 3;
    /** The ICMP error type, if present */
    optional uint32 icmptype = 4; //XXX inconsistent, maybe change icmp?
    /** The ICMP error code, if present */
    optional uint32 icmpcode = 5;
    /** The TCP flags set in the header of the response packet, if present */
    optional TcpFlags flags = 6;
    /** The name of the test target (as given in the schedule) */
    optional string name = 7;
}


/**
 * If the response packet is TCP then report all the flags that were set.
 */
message TcpFlags {
    /* Was the FIN flag set? */
    optional bool fin = 1;
    /* Was the SYN flag set? */
    optional bool syn = 2;
    /* Was the RST flag set? */
    optional bool rst = 3;
    /* Was the PSH flag set? */
    optional bool psh = 4;
    /* Was the ACK flag set? */
    optional bool ack = 5;
    /* Was the URG flag set? */
    optional bool urg = 6;
}
