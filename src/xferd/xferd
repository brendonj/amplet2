#!/usr/bin/python

import pika
from ampsave.importer import import_data_functions


class XferServer:
    def __init__(self, username, password, host, port, queue):
        self.amp_modules = import_data_functions()

        # Connect to rabbitmq
        credentials = pika.PlainCredentials(username, password)
        connection = pika.BlockingConnection(pika.ConnectionParameters(
                    host=host,
                    port=int(port),
                    # TODO do ssl properly
                    ssl=False,
                    credentials=credentials)
                )
        self.channel = connection.channel()
        self.channel.queue_declare(queue=queue, durable=True)
        # limit to only one outstanding message at a time
        self.channel.basic_qos(prefetch_count=1)
        self.channel.basic_consume(self.process_data, queue=queue)

    def process_data(self, channel, method, properties, body):
        """ Process a single message from the queue.
            Depending on the test this message may include multiple results.
        """
        test = properties.headers["x-amp-test-type"]
        if test in self.amp_modules:
            data = self.amp_modules[test].get_data(body)
            source = properties.headers["x-amp-source-monitor"]
            # TODO write something in the style of old data
            print source, data

        # TODO check if it all worked, don't ack if it fails?
        channel.basic_ack(delivery_tag = method.delivery_tag)

    def run(self):
        """ Run forever, calling the process_data callback for each message """
        print "Running amp modules: %s" % " ".join(self.amp_modules)
        self.channel.start_consuming()


if __name__ == '__main__':
    xfer = XferServer("guest", "guest", "localhost", 5672, "foo")
    xfer.run()

# vim: set sw=4 tabstop=4 softtabstop=4 expandtab :
